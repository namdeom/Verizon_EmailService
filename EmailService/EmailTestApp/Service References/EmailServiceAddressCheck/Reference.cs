//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EmailTestApp.EmailServiceAddressCheck {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileAttachment", Namespace="http://schemas.datacontract.org/2004/07/Services.EmailServiceP" +
        "rovider.Interface")]
    [System.SerializableAttribute()]
    public partial class FileAttachment : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EmailServiceFault", Namespace="http://adp.com/ds/serviceedge/services/emailservice/fault")]
    public enum EmailServiceFault : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ValidationFailed = 0,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SystemFault", Namespace="http://adp.com/ds/serviceedge/services/2013-11-28")]
    [System.SerializableAttribute()]
    public partial class SystemFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthorizationFault", Namespace="http://adp.com/ds/serviceedge/services/2013-11-28")]
    [System.SerializableAttribute()]
    public partial class AuthorizationFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvalidRecipients", Namespace="http://schemas.datacontract.org/2004/07/Services.EmailService." +
        "MessageContracts")]
    [System.SerializableAttribute()]
    public partial class InvalidRecipients : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] BadDomainsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] BadDomains {
            get {
                return this.BadDomainsField;
            }
            set {
                if ((object.ReferenceEquals(this.BadDomainsField, value) != true)) {
                    this.BadDomainsField = value;
                    this.RaisePropertyChanged("BadDomains");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://adp.com/ds/serviceedge/services/emailservice", ConfigurationName="EmailServiceAddressCheck.IEmailService")]
    public interface IEmailService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://adp.com/ds/serviceedge/services/emailservice/IEmailService/SendEmail", ReplyAction="http://adp.com/ds/serviceedge/services/emailservice/IEmailService/SendEmailRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(EmailTestApp.EmailServiceAddressCheck.EmailServiceFault), Action="http://adp.com/ds/serviceedge/services/emailservice/IEmailService/SendEmailEmailS" +
            "erviceFaultFault", Name="EmailServiceFault", Namespace="http://adp.com/ds/serviceedge/services/emailservice/fault")]
        [System.ServiceModel.FaultContractAttribute(typeof(EmailTestApp.EmailServiceAddressCheck.SystemFault), Action="http://adp.com/ds/serviceedge/services/emailservice/IEmailService/SendEmailSystem" +
            "FaultFault", Name="SystemFault", Namespace="http://adp.com/ds/serviceedge/services/2013-11-28")]
        [System.ServiceModel.FaultContractAttribute(typeof(EmailTestApp.EmailServiceAddressCheck.AuthorizationFault), Action="http://adp.com/ds/serviceedge/services/emailservice/IEmailService/SendEmailAuthor" +
            "izationFaultFault", Name="AuthorizationFault", Namespace="http://adp.com/ds/serviceedge/services/2013-11-28")]
        EmailTestApp.EmailServiceAddressCheck.SendEmailResponse SendEmail(EmailTestApp.EmailServiceAddressCheck.SendEmailRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://adp.com/ds/serviceedge/services/emailservice/IEmailService/SendEmail", ReplyAction="http://adp.com/ds/serviceedge/services/emailservice/IEmailService/SendEmailRespon" +
            "se")]
        System.Threading.Tasks.Task<EmailTestApp.EmailServiceAddressCheck.SendEmailResponse> SendEmailAsync(EmailTestApp.EmailServiceAddressCheck.SendEmailRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://adp.com/ds/serviceedge/services/emailservice/IEmailService/SendEmailWithBa" +
            "dAddressCheck", ReplyAction="http://adp.com/ds/serviceedge/services/emailservice/IEmailService/SendEmailWithBa" +
            "dAddressCheckResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EmailTestApp.EmailServiceAddressCheck.EmailServiceFault), Action="http://adp.com/ds/serviceedge/services/emailservice/IEmailService/SendEmailWithBa" +
            "dAddressCheckEmailServiceFaultFault", Name="EmailServiceFault", Namespace="http://adp.com/ds/serviceedge/services/emailservice/fault")]
        [System.ServiceModel.FaultContractAttribute(typeof(EmailTestApp.EmailServiceAddressCheck.SystemFault), Action="http://adp.com/ds/serviceedge/services/emailservice/IEmailService/SendEmailWithBa" +
            "dAddressCheckSystemFaultFault", Name="SystemFault", Namespace="http://adp.com/ds/serviceedge/services/2013-11-28")]
        [System.ServiceModel.FaultContractAttribute(typeof(EmailTestApp.EmailServiceAddressCheck.AuthorizationFault), Action="http://adp.com/ds/serviceedge/services/emailservice/IEmailService/SendEmailWithBa" +
            "dAddressCheckAuthorizationFaultFault", Name="AuthorizationFault", Namespace="http://adp.com/ds/serviceedge/services/2013-11-28")]
        EmailTestApp.EmailServiceAddressCheck.SendEmailWithBadAddressCheckResponse SendEmailWithBadAddressCheck(EmailTestApp.EmailServiceAddressCheck.SendEmailRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://adp.com/ds/serviceedge/services/emailservice/IEmailService/SendEmailWithBa" +
            "dAddressCheck", ReplyAction="http://adp.com/ds/serviceedge/services/emailservice/IEmailService/SendEmailWithBa" +
            "dAddressCheckResponse")]
        System.Threading.Tasks.Task<EmailTestApp.EmailServiceAddressCheck.SendEmailWithBadAddressCheckResponse> SendEmailWithBadAddressCheckAsync(EmailTestApp.EmailServiceAddressCheck.SendEmailRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SendEmailRequest", WrapperNamespace="http://adp.com/ds/serviceedge/services/emailservice/message", IsWrapped=true)]
    public partial class SendEmailRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://adp.com/ds/serviceedge/services/emailservice")]
        public string SessionId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://adp.com/ds/serviceedge/services/emailservice", Order=0)]
        public EmailTestApp.EmailServiceAddressCheck.FileAttachment[] Attachments;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://adp.com/ds/serviceedge/services/emailservice", Order=1)]
        public string Body;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://adp.com/ds/serviceedge/services/emailservice", Order=2)]
        public string[] CarbonCopyList;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://adp.com/ds/serviceedge/services/emailservice", Order=3)]
        public string FromEmailAddress;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://adp.com/ds/serviceedge/services/emailservice", Order=4)]
        public string[] Recipients;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://adp.com/ds/serviceedge/services/emailservice", Order=5)]
        public string Subject;
        
        public SendEmailRequest() {
        }
        
        public SendEmailRequest(string SessionId, EmailTestApp.EmailServiceAddressCheck.FileAttachment[] Attachments, string Body, string[] CarbonCopyList, string FromEmailAddress, string[] Recipients, string Subject) {
            this.SessionId = SessionId;
            this.Attachments = Attachments;
            this.Body = Body;
            this.CarbonCopyList = CarbonCopyList;
            this.FromEmailAddress = FromEmailAddress;
            this.Recipients = Recipients;
            this.Subject = Subject;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SendEmailResponse", WrapperNamespace="http://adp.com/ds/serviceedge/services/emailservice/message", IsWrapped=true)]
    public partial class SendEmailResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://adp.com/ds/serviceedge/services/emailservice", Order=0)]
        public bool IsSuccess;
        
        public SendEmailResponse() {
        }
        
        public SendEmailResponse(bool IsSuccess) {
            this.IsSuccess = IsSuccess;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SendEmailWithBadAddressCheckResponse", WrapperNamespace="http://adp.com/ds/serviceedge/services/emailservice/message", IsWrapped=true)]
    public partial class SendEmailWithBadAddressCheckResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://adp.com/ds/serviceedge/services/emailservice", Order=0)]
        public EmailTestApp.EmailServiceAddressCheck.InvalidRecipients InvalidRecipients;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://adp.com/ds/serviceedge/services/emailservice", Order=1)]
        public bool IsSuccess;
        
        public SendEmailWithBadAddressCheckResponse() {
        }
        
        public SendEmailWithBadAddressCheckResponse(EmailTestApp.EmailServiceAddressCheck.InvalidRecipients InvalidRecipients, bool IsSuccess) {
            this.InvalidRecipients = InvalidRecipients;
            this.IsSuccess = IsSuccess;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEmailServiceChannel : EmailTestApp.EmailServiceAddressCheck.IEmailService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmailServiceClient : System.ServiceModel.ClientBase<EmailTestApp.EmailServiceAddressCheck.IEmailService>, EmailTestApp.EmailServiceAddressCheck.IEmailService {
        
        public EmailServiceClient() {
        }
        
        public EmailServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmailServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmailServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmailServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public EmailTestApp.EmailServiceAddressCheck.SendEmailResponse SendEmail(EmailTestApp.EmailServiceAddressCheck.SendEmailRequest request) {
            return base.Channel.SendEmail(request);
        }
        
        public System.Threading.Tasks.Task<EmailTestApp.EmailServiceAddressCheck.SendEmailResponse> SendEmailAsync(EmailTestApp.EmailServiceAddressCheck.SendEmailRequest request) {
            return base.Channel.SendEmailAsync(request);
        }
        
        public EmailTestApp.EmailServiceAddressCheck.SendEmailWithBadAddressCheckResponse SendEmailWithBadAddressCheck(EmailTestApp.EmailServiceAddressCheck.SendEmailRequest request) {
            return base.Channel.SendEmailWithBadAddressCheck(request);
        }
        
        public System.Threading.Tasks.Task<EmailTestApp.EmailServiceAddressCheck.SendEmailWithBadAddressCheckResponse> SendEmailWithBadAddressCheckAsync(EmailTestApp.EmailServiceAddressCheck.SendEmailRequest request) {
            return base.Channel.SendEmailWithBadAddressCheckAsync(request);
        }
    }
}
